import math
import numpy as np
from scipy.stats import norm

class OptionCalculator:
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∏–∫
    """
    
    def __init__(self, S, K, T, r, sigma, option_type='call', 
                 asset_type='futures', dividend_yield=0, n_steps=1000, 
                 n_simulations=100000, dividends=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ü–∏–æ–Ω–∞
        """
        self.S = S
        self.K = K
        self.T = T / 365.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –≤ –≥–æ–¥—ã
        self.r = r
        self.sigma = sigma  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ % (0.20 –¥–ª—è 20%)
        self.option_type = option_type.lower()
        self.asset_type = asset_type.lower()
        self.dividend_yield = dividend_yield
        self.n_steps = n_steps
        self.n_simulations = n_simulations
        self.dividends = dividends or []
        
        if self.option_type not in ['call', 'put']:
            raise ValueError("Option type must be 'call' or 'put'")
        if self.asset_type not in ['futures', 'stock', 'currency', 'index']:
            raise ValueError("Asset type must be 'futures', 'stock', 'currency', or 'index'")
    
    def show_formula_calculation(self, formula_name, steps):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—á–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –ø–æ —à–∞–≥–∞–º"""
        print(f"\nüìä –†–ê–°–ß–ï–¢ {formula_name}:")
        print("=" * 50)
        for i, step in enumerate(steps, 1):
            print(f"{i}. {step}")
        print("=" * 50)
    
    def calculate_all_greeks(self, model='black_scholes_moex'):
        """–†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –≥—Ä–µ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            if model == 'black_scholes_moex':
                return self.calculate_greeks_moex()
            elif model == 'black_scholes_classic':
                return self.calculate_greeks_classic()
            elif model == 'bachelier':
                return self.calculate_greeks_bachelier()
            else:
                return None
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–µ–∫–æ–≤: {e}"
    
    def calculate_greeks_moex(self):
        """–†–∞—Å—á–µ—Ç –≥—Ä–µ–∫–æ–≤ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        if self.sigma <= 0 or self.T <= 0:
            return None
            
        d1 = (math.log(self.S / self.K) + (self.sigma**2) * self.T / 2) / (self.sigma * math.sqrt(self.T))
        d2 = d1 - self.sigma * math.sqrt(self.T)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–µ–∫–∏
        if self.option_type == 'call':
            delta = norm.cdf(d1)
        else:
            delta = norm.cdf(d1) - 1
            
        gamma = norm.pdf(d1) / (self.S * self.sigma * math.sqrt(self.T)) * 100
        vega = self.S * norm.pdf(d1) * math.sqrt(self.T) / 100
        
        # –¢–µ—Ç–∞ (–∑–∞ 1 –¥–µ–Ω—å)
        theta_per_day = - (self.S * norm.pdf(d1) * self.sigma) / (2 * math.sqrt(self.T)) / 365
        
        # –†–æ (–¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ = 0)
        rho = 0
        
        return {
            'delta': round(delta, 6),
            'gamma': round(gamma, 6),
            'vega': round(vega, 6),
            'theta': round(theta_per_day, 6),
            'rho': round(rho, 6)
        }
    
    def calculate_greeks_classic(self):
        """–†–∞—Å—á–µ—Ç –≥—Ä–µ–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –ë-–®"""
        if self.sigma <= 0 or self.T <= 0:
            return None
            
        d1 = (math.log(self.S / self.K) + (self.r + self.sigma**2 / 2) * self.T) / (self.sigma * math.sqrt(self.T))
        d2 = d1 - self.sigma * math.sqrt(self.T)
        
        if self.option_type == 'call':
            delta = norm.cdf(d1)
            rho = self.K * self.T * math.exp(-self.r * self.T) * norm.cdf(d2) / 100
        else:
            delta = norm.cdf(d1) - 1
            rho = -self.K * self.T * math.exp(-self.r * self.T) * norm.cdf(-d2) / 100
            
        gamma = norm.pdf(d1) / (self.S * self.sigma * math.sqrt(self.T)) * 100
        vega = self.S * norm.pdf(d1) * math.sqrt(self.T) / 100
        
        # –¢–µ—Ç–∞ (–∑–∞ 1 –¥–µ–Ω—å)
        if self.option_type == 'call':
            theta_per_day = (- (self.S * norm.pdf(d1) * self.sigma) / (2 * math.sqrt(self.T)) - 
                            self.r * self.K * math.exp(-self.r * self.T) * norm.cdf(d2)) / 365
        else:
            theta_per_day = (- (self.S * norm.pdf(d1) * self.sigma) / (2 * math.sqrt(self.T)) + 
                            self.r * self.K * math.exp(-self.r * self.T) * norm.cdf(-d2)) / 365
        
        return {
            'delta': round(delta, 6),
            'gamma': round(gamma, 6),
            'vega': round(vega, 6),
            'theta': round(theta_per_day, 6),
            'rho': round(rho, 6)
        }
    
    def calculate_greeks_bachelier(self):
        """–†–∞—Å—á–µ—Ç –≥—Ä–µ–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ –ë–∞—à–µ–ª—å–µ"""
        if self.sigma <= 0 or self.T <= 0:
            return None
            
        # –î–ª—è –º–æ–¥–µ–ª–∏ –ë–∞—à–µ–ª—å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        sigma_abs = self.sigma * self.S
        
        d = (self.S - self.K) / (sigma_abs * math.sqrt(self.T))
        
        if self.option_type == 'call':
            delta = norm.cdf(d)
        else:
            delta = norm.cdf(d) - 1
            
        gamma = norm.pdf(d) / (sigma_abs * math.sqrt(self.T)) * 100
        vega = math.sqrt(self.T) * norm.pdf(d) / 100
        theta_per_day = - (sigma_abs * norm.pdf(d)) / (2 * math.sqrt(self.T)) / 365
        rho = 0
        
        return {
            'delta': round(delta, 6),
            'gamma': round(gamma, 6),
            'vega': round(vega, 6),
            'theta': round(theta_per_day, 6),
            'rho': round(rho, 6)
        }
    
    def black_scholes_moex(self):
        """–ú–æ–¥–µ–ª—å –ë–ª—ç–∫–∞-–®–æ—É–ª–∑–∞ –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –ú–æ—Å–ë–∏—Ä–∂–∏ (–ë–ï–ó —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤)"""
        try:
            if self.sigma <= 0:
                if self.option_type == 'call':
                    return max(self.S - self.K, 0)
                else:
                    return max(self.K - self.S, 0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç d1 –∏ d2
            log_sk = math.log(self.S / self.K)
            sigma_sq_t = (self.sigma**2) * self.T / 2
            denominator = self.sigma * math.sqrt(self.T)
            
            d1 = (log_sk + sigma_sq_t) / denominator
            d2 = d1 - self.sigma * math.sqrt(self.T)
            
            steps = [
                f"d1 = ln(S/K) + (œÉ¬≤ * T/2) / (œÉ * ‚àöT)",
                f"d1 = ln({self.S}/{self.K}) + ({self.sigma:.6f}¬≤ * {self.T:.6f}/2) / ({self.sigma:.6f} * ‚àö{self.T:.6f})",
                f"d1 = {log_sk:.6f} + {sigma_sq_t:.6f} / {denominator:.6f}",
                f"d1 = {d1:.6f}",
                f"d2 = d1 - œÉ * ‚àöT = {d1:.6f} - {self.sigma:.6f} * ‚àö{self.T:.6f}",
                f"d2 = {d2:.6f}",
                f"N(d1) = {norm.cdf(d1):.6f}, N(d2) = {norm.cdf(d2):.6f}"
            ]
            
            if self.option_type == 'call':
                price = self.S * norm.cdf(d1) - self.K * norm.cdf(d2)
                steps.extend([
                    f"–¶–µ–Ω–∞ CALL = S * N(d1) - K * N(d2)",
                    f"–¶–µ–Ω–∞ CALL = {self.S} * {norm.cdf(d1):.6f} - {self.K} * {norm.cdf(d2):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {self.S * norm.cdf(d1):.6f} - {self.K * norm.cdf(d2):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {price:.6f}"
                ])
            else:
                price = self.K * norm.cdf(-d2) - self.S * norm.cdf(-d1)
                steps.extend([
                    f"–¶–µ–Ω–∞ PUT = K * N(-d2) - S * N(-d1)",
                    f"–¶–µ–Ω–∞ PUT = {self.K} * {norm.cdf(-d2):.6f} - {self.S} * {norm.cdf(-d1):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {self.K * norm.cdf(-d2):.6f} - {self.S * norm.cdf(-d1):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {price:.6f}"
                ])
            
            self.show_formula_calculation("BLACK-SCHOLES MOEX", steps)
            
            return round(max(price, 0), 4)
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤ Black-Scholes MOEX: {e}"
    
    def black_scholes_classic(self):
        """–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –ë–ª—ç–∫–∞-–®–æ—É–ª–∑–∞ (–°–û —Å—Ç–∞–≤–∫–æ–π)"""
        try:
            if self.sigma <= 0:
                if self.option_type == 'call':
                    return max(self.S - self.K * math.exp(-self.r * self.T), 0)
                else:
                    return max(self.K * math.exp(-self.r * self.T) - self.S, 0)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç d1 –∏ d2
            log_sk = math.log(self.S / self.K)
            r_sigma_sq = (self.r + self.sigma**2 / 2) * self.T
            denominator = self.sigma * math.sqrt(self.T)
            
            d1 = (log_sk + r_sigma_sq) / denominator
            d2 = d1 - self.sigma * math.sqrt(self.T)
            
            discount_factor = math.exp(-self.r * self.T)
            
            steps = [
                f"d1 = [ln(S/K) + (r + œÉ¬≤/2) * T] / (œÉ * ‚àöT)",
                f"d1 = [ln({self.S}/{self.K}) + ({self.r:.6f} + {self.sigma:.6f}¬≤/2) * {self.T:.6f}] / ({self.sigma:.6f} * ‚àö{self.T:.6f})",
                f"d1 = [{log_sk:.6f} + {r_sigma_sq:.6f}] / {denominator:.6f}",
                f"d1 = {d1:.6f}",
                f"d2 = d1 - œÉ * ‚àöT = {d1:.6f} - {self.sigma:.6f} * ‚àö{self.T:.6f}",
                f"d2 = {d2:.6f}",
                f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è e^(-rT) = e^(-{self.r:.6f}*{self.T:.6f}) = {discount_factor:.6f}",
                f"N(d1) = {norm.cdf(d1):.6f}, N(d2) = {norm.cdf(d2):.6f}"
            ]
            
            if self.option_type == 'call':
                price = self.S * norm.cdf(d1) - self.K * discount_factor * norm.cdf(d2)
                steps.extend([
                    f"–¶–µ–Ω–∞ CALL = S * N(d1) - K * e^(-rT) * N(d2)",
                    f"–¶–µ–Ω–∞ CALL = {self.S} * {norm.cdf(d1):.6f} - {self.K} * {discount_factor:.6f} * {norm.cdf(d2):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {self.S * norm.cdf(d1):.6f} - {self.K * discount_factor * norm.cdf(d2):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {price:.6f}"
                ])
            else:
                price = self.K * discount_factor * norm.cdf(-d2) - self.S * norm.cdf(-d1)
                steps.extend([
                    f"–¶–µ–Ω–∞ PUT = K * e^(-rT) * N(-d2) - S * N(-d1)",
                    f"–¶–µ–Ω–∞ PUT = {self.K} * {discount_factor:.6f} * {norm.cdf(-d2):.6f} - {self.S} * {norm.cdf(-d1):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {self.K * discount_factor * norm.cdf(-d2):.6f} - {self.S * norm.cdf(-d1):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {price:.6f}"
                ])
            
            self.show_formula_calculation("CLASSIC BLACK-SCHOLES", steps)
            
            return round(max(price, 0), 4)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º Black-Scholes: {e}"
    
    def bachelier_model(self):
        """–ú–æ–¥–µ–ª—å –ë–∞—à–µ–ª—å–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å)"""
        try:
            if self.sigma <= 0:
                if self.option_type == 'call':
                    return max(self.S - self.K, 0)
                else:
                    return max(self.K - self.S, 0)
            
            # –î–ª—è –º–æ–¥–µ–ª–∏ –ë–∞—à–µ–ª—å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            sigma_abs = self.sigma * self.S
            
            d = (self.S - self.K) / (sigma_abs * math.sqrt(self.T))
            
            steps = [
                f"–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å œÉ_abs = œÉ * S = {self.sigma:.6f} * {self.S} = {sigma_abs:.6f}",
                f"d = (S - K) / (œÉ_abs * ‚àöT)",
                f"d = ({self.S} - {self.K}) / ({sigma_abs:.6f} * ‚àö{self.T:.6f})",
                f"d = {self.S - self.K:.6f} / {sigma_abs * math.sqrt(self.T):.6f}",
                f"d = {d:.6f}",
                f"N(d) = {norm.cdf(d):.6f}, œÜ(d) = {norm.pdf(d):.6f}"
            ]
            
            if self.option_type == 'call':
                price = ((self.S - self.K) * norm.cdf(d) + 
                        sigma_abs * math.sqrt(self.T) * norm.pdf(d))
                steps.extend([
                    f"–¶–µ–Ω–∞ CALL = (S - K) * N(d) + œÉ_abs * ‚àöT * œÜ(d)",
                    f"–¶–µ–Ω–∞ CALL = ({self.S} - {self.K}) * {norm.cdf(d):.6f} + {sigma_abs:.6f} * ‚àö{self.T:.6f} * {norm.pdf(d):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {self.S - self.K:.6f} * {norm.cdf(d):.6f} + {sigma_abs * math.sqrt(self.T):.6f} * {norm.pdf(d):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {(self.S - self.K) * norm.cdf(d):.6f} + {sigma_abs * math.sqrt(self.T) * norm.pdf(d):.6f}",
                    f"–¶–µ–Ω–∞ CALL = {price:.6f}"
                ])
            else:
                price = ((self.K - self.S) * norm.cdf(-d) + 
                        sigma_abs * math.sqrt(self.T) * norm.pdf(d))
                steps.extend([
                    f"–¶–µ–Ω–∞ PUT = (K - S) * N(-d) + œÉ_abs * ‚àöT * œÜ(d)",
                    f"–¶–µ–Ω–∞ PUT = ({self.K} - {self.S}) * {norm.cdf(-d):.6f} + {sigma_abs:.6f} * ‚àö{self.T:.6f} * {norm.pdf(d):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {self.K - self.S:.6f} * {norm.cdf(-d):.6f} + {sigma_abs * math.sqrt(self.T):.6f} * {norm.pdf(d):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {(self.K - self.S) * norm.cdf(-d):.6f} + {sigma_abs * math.sqrt(self.T) * norm.pdf(d):.6f}",
                    f"–¶–µ–Ω–∞ PUT = {price:.6f}"
                ])
            
            self.show_formula_calculation("BACHELIER MODEL", steps)
            
            return round(max(price, 0), 4)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥–µ–ª–∏ –ë–∞—à–µ–ª—å–µ: {e}"
    
    def binomial_tree(self, use_r=True):
        """–ë–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å –æ–ø—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏"""
        try:
            if self.T <= 0:
                if self.option_type == 'call':
                    return max(self.S - self.K, 0)
                else:
                    return max(self.K - self.S, 0)
            
            dt = self.T / self.n_steps
            u = math.exp(self.sigma * math.sqrt(dt))
            d = 1 / u
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–≤–∫—É
            if use_r:
                p = (math.exp(self.r * dt) - d) / (u - d)
                method_name = "BINOMIAL TREE WITH R"
            else:
                p = (1 - d) / (u - d)
                method_name = "BINOMIAL TREE WITHOUT R"
            
            steps = [
                f"Œît = T/n = {self.T:.6f}/{self.n_steps} = {dt:.6f}",
                f"u = e^(œÉ‚àöŒît) = e^({self.sigma:.6f}*‚àö{dt:.6f}) = {u:.6f}",
                f"d = 1/u = {d:.6f}",
                f"p = {'(e^(rŒît) - d)/(u - d)' if use_r else '(1 - d)/(u - d)'}",
                f"p = {'(e^(' + str(self.r) + '*' + str(dt) + ') - ' + str(d) + ')/(' + str(u) + ' - ' + str(d) + ')' if use_r else '(1 - ' + str(d) + ')/(' + str(u) + ' - ' + str(d) + ')'}",
                f"p = {p:.6f}"
            ]
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ü–µ–Ω –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–º —à–∞–≥–µ
            prices = np.zeros(self.n_steps + 1)
            for i in range(self.n_steps + 1):
                prices[i] = self.S * (u ** (self.n_steps - i)) * (d ** i)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø—Ü–∏–æ–Ω–∞ –Ω–∞ –∫–æ–Ω–µ—á–Ω—ã—Ö —É–∑–ª–∞—Ö
            if self.option_type == 'call':
                values = np.maximum(prices - self.K, 0)
            else:
                values = np.maximum(self.K - prices, 0)
            
            # –û–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –¥–µ—Ä–µ–≤—É
            for step in range(self.n_steps - 1, -1, -1):
                if use_r:
                    discount = math.exp(-self.r * dt)
                    values = discount * (p * values[:-1] + (1 - p) * values[1:])
                else:
                    values = p * values[:-1] + (1 - p) * values[1:]
            
            steps.extend([
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {self.n_steps}",
                f"–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞: {values[0]:.6f}",
                f"–ú–µ—Ç–æ–¥: {'—Å —É—á–µ—Ç–æ–º —Å—Ç–∞–≤–∫–∏' if use_r else '–±–µ–∑ —É—á–µ—Ç–∞ —Å—Ç–∞–≤–∫–∏'}"
            ])
            
            self.show_formula_calculation(method_name, steps)
            
            return round(values[0], 4)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤ Binomial Tree: {e}"
    
    def monte_carlo(self, use_r=True):
        """–ú–µ—Ç–æ–¥ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ —Å –æ–ø—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏"""
        try:
            if self.T <= 0:
                if self.option_type == 'call':
                    return max(self.S - self.K, 0)
                else:
                    return max(self.K - self.S, 0)
            
            np.random.seed(42)
            z = np.random.standard_normal(self.n_simulations)
            
            if use_r:
                drift = (self.r - 0.5 * self.sigma**2) * self.T
                method_name = "MONTE CARLO WITH R"
            else:
                drift = -0.5 * self.sigma**2 * self.T
                method_name = "MONTE CARLO WITHOUT R"
                
            ST = self.S * np.exp(drift + self.sigma * math.sqrt(self.T) * z)
            
            if self.option_type == 'call':
                payoff = np.maximum(ST - self.K, 0)
            else:
                payoff = np.maximum(self.K - ST, 0)
            
            if use_r:
                price = np.exp(-self.r * self.T) * np.mean(payoff)
            else:
                price = np.mean(payoff)
            
            steps = [
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π: {self.n_simulations}",
                f"–î—Ä–µ–π—Ñ = {'(r - œÉ¬≤/2)*T' if use_r else '(-œÉ¬≤/2)*T'}",
                f"–î—Ä–µ–π—Ñ = {'(' + str(self.r) + ' - ' + str(self.sigma**2/2) + ')*' + str(self.T) if use_r else '(-' + str(self.sigma**2/2) + ')*' + str(self.T)}",
                f"–î—Ä–µ–π—Ñ = {drift:.6f}",
                f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ payoff: {np.mean(payoff):.6f}",
                f"{'–î–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: e^(-rT) * mean(payoff)' if use_r else '–¶–µ–Ω–∞: mean(payoff)'}",
                f"{'e^(-' + str(self.r) + '*' + str(self.T) + ') * ' + str(np.mean(payoff)) if use_r else ''}",
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {price:.6f}"
            ]
            
            self.show_formula_calculation(method_name, steps)
                
            return round(price, 4)
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤ Monte Carlo: {e}"
    
    def calculate_all(self):
        """–†–∞—Å—á–µ—Ç –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∏ –º–æ–¥–µ–ª—è–º–∏"""
        results = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
            'MOEX_Black_Scholes': self.black_scholes_moex(),
            'Classic_Black_Scholes': self.black_scholes_classic(),
            'Bachelier_Model': self.bachelier_model(),
            
            # –ë–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è
            'Binomial_Tree_With_R': self.binomial_tree(use_r=True),
            'Binomial_Tree_Without_R': self.binomial_tree(use_r=False),
            
            # –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ
            'Monte_Carlo_With_R': self.monte_carlo(use_r=True),
            'Monte_Carlo_Without_R': self.monte_carlo(use_r=False),
            
            # –ì—Ä–µ–∫–∏
            'Greeks_MOEX': self.calculate_greeks_moex(),
            'Greeks_Classic': self.calculate_greeks_classic(),
            'Greeks_Bachelier': self.calculate_greeks_bachelier()
        }
        
        return results

def manual_input():
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ü–∏–æ–Ω–∞"""
    print("\n=== –†–£–ß–ù–û–ô –í–í–û–î –ü–ê–†–ê–ú–ï–¢–†–û–í ===")
    
    S = float(input("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞ (S): "))
    K = float(input("–¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Å—Ç—Ä–∞–π–∫, K): "))
    T_days = float(input("–í—Ä–µ–º—è –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ –≤ –¥–Ω—è—Ö: "))
    option_type = input("–¢–∏–ø –æ–ø—Ü–∏–æ–Ω–∞ (call/put): ").lower()
    iv = float(input("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.20 –¥–ª—è 20%): "))
    r = float(input("–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05 –¥–ª—è 5%): ") or "0.165")
    
    # –¢–∏–ø –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–∑–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–∞:")
    print("1 - –§—å—é—á–µ—Ä—Å—ã")
    print("2 - –ê–∫—Ü–∏–∏")
    print("3 - –í–∞–ª—é—Ç—ã")
    print("4 - –ò–Ω–¥–µ–∫—Å—ã")
    
    asset_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ") or "1"
    asset_types = {'1': 'futures', '2': 'stock', '3': 'currency', '4': 'index'}
    asset_type = asset_types.get(asset_choice, 'futures')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    n_steps = int(input("–®–∞–≥–æ–≤ –¥–ª—è –±–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ (100-1000): ") or "500")
    n_simulations = int(input("–°–∏–º—É–ª—è—Ü–∏–π –¥–ª—è –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ (10000-100000): ") or "50000")
    
    return {
        'S': S,
        'K': K,
        'T_days': T_days,
        'r': r,
        'iv': iv,
        'option_type': option_type,
        'asset_type': asset_type,
        'n_steps': n_steps,
        'n_simulations': n_simulations
    }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –û–ü–¶–ò–û–ù–û–í ===\n")
    
    try:
        manual_data = manual_input()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        S = manual_data['S']
        K = manual_data['K']
        T_days = manual_data['T_days']
        option_type = manual_data['option_type']
        iv = manual_data['iv']
        r = manual_data['r']
        asset_type = manual_data['asset_type']
        n_steps = manual_data['n_steps']
        n_simulations = manual_data['n_simulations']
    
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        calculator = OptionCalculator(
            S, K, T_days, r, iv, option_type, asset_type, 
            0, n_steps, n_simulations, []
        )
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—á–µ—Ç
        results = calculator.calculate_all()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê")
        print("="*60)
        
        print(f"\n{'–ú–û–î–ï–õ–¨':<25} {'–¶–ï–ù–ê':<10}")
        print("-" * 35)
        models = ['MOEX_Black_Scholes', 'Classic_Black_Scholes', 'Bachelier_Model', 
                 'Binomial_Tree_With_R', 'Binomial_Tree_Without_R', 
                 'Monte_Carlo_With_R', 'Monte_Carlo_Without_R']
        
        for model in models:
            price = results.get(model, 'N/A')
            if isinstance(price, (int, float)):
                print(f"{model:<25} {price:<10.4f}")
            else:
                print(f"{model:<25} {price:<10}")
        
        # –í—ã–≤–æ–¥ –≥—Ä–µ–∫–æ–≤
        print(f"\n\n{'–ì–†–ï–ö–ò':<8} {'MOEX':<12} {'Classic':<12} {'Bachelier':<12}")
        print("-" * 44)
        greeks = ['delta', 'gamma', 'vega', 'theta', 'rho']
        for greek in greeks:
            moex_val = results['Greeks_MOEX'].get(greek, 'N/A') if results['Greeks_MOEX'] else 'N/A'
            classic_val = results['Greeks_Classic'].get(greek, 'N/A') if results['Greeks_Classic'] else 'N/A'
            bachelier_val = results['Greeks_Bachelier'].get(greek, 'N/A') if results['Greeks_Bachelier'] else 'N/A'
            
            if all(isinstance(v, (int, float)) for v in [moex_val, classic_val, bachelier_val] if v != 'N/A'):
                print(f"{greek:<8} {moex_val:<12.6f} {classic_val:<12.6f} {bachelier_val:<12.6f}")
            else:
                print(f"{greek:<8} {moex_val:<12} {classic_val:<12} {bachelier_val:<12}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"–í—Ä–µ–º—è –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: {T_days} –¥–Ω–µ–π ({calculator.T:.4f} –ª–µ—Ç)")
        print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç S/K: {S/K:.4f}")
        print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {iv*100:.2f}%")
        print(f"–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {r*100:.2f}%")
        
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
    